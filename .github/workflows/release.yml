name: Release

on:
  push:
    paths:
      - 'package.json'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version change
        id: check
        run: |
          if [ -f package.json ]; then
            CURRENT_VERSION=$(git show HEAD^:package.json 2>/dev/null | grep '_v' | head -1 | cut -d'"' -f4 || echo "")
            NEW_VERSION=$(grep '_v' package.json | head -1 | cut -d'"' -f4)

            if [ "$CURRENT_VERSION" != "$NEW_VERSION" ] && [ -n "$NEW_VERSION" ]; then
              echo "Version changed from $CURRENT_VERSION to $NEW_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "No version change detected"
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "version=" >> $GITHUB_OUTPUT
            fi
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ needs.check-version.outputs.version }}
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          generate_release_notes: true
          draft: false
          prerelease: false

  build-docker:
    needs: create-release
    if: needs.create-release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Docker Build
        uses: actions/github-script@v8
        with:
          script: |
            try {
              const { data } = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docker-build.yml',
                ref: 'master',
                inputs: {
                  tag: '${{ needs.create-release.outputs.version }}'
                }
              });
              console.log('Successfully triggered workflow:', data);
              return data;
            } catch (error) {
              console.error('Error triggering workflow:', error);
              throw error;
            }
